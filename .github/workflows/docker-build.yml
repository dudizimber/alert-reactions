name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'actions/*/Dockerfile'
      - 'actions/*/src/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'actions/*/Dockerfile'
      - 'actions/*/src/**'

env:
  REGISTRY: docker.io
  REGISTRY_USERNAME: dudizimber

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      actions: ${{ steps.changes.outputs.actions }}
      actions_json: ${{ steps.changes.outputs.actions_json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed actions
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
          fi

          # Find all action directories with Dockerfiles
          ALL_ACTIONS=$(find actions -name "Dockerfile" -exec dirname {} \; | sort)
          
          # Detect changed actions
          CHANGED_ACTIONS=""
          for action_dir in $ALL_ACTIONS; do
            if git diff --name-only $BASE_SHA HEAD | grep -q "^$action_dir/"; then
              CHANGED_ACTIONS="$CHANGED_ACTIONS $action_dir"
            fi
          done

          # For tags, build all actions
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            CHANGED_ACTIONS="$ALL_ACTIONS"
          fi

          # Convert to JSON array for matrix
          ACTIONS_JSON=$(echo $CHANGED_ACTIONS | tr ' ' '\n' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          
          echo "actions<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_ACTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "actions_json=$ACTIONS_JSON" >> $GITHUB_OUTPUT
          
          echo "Changed actions: $CHANGED_ACTIONS"
          echo "Actions JSON: $ACTIONS_JSON"

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.actions_json != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        action: ${{ fromJson(needs.detect-changes.outputs.actions_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract action name
        id: action
        run: |
          ACTION_NAME=$(basename "${{ matrix.action }}")
          echo "name=$ACTION_NAME" >> $GITHUB_OUTPUT
          echo "path=${{ matrix.action }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/alert-reactions-${{ steps.action.outputs.name }}
          tags: |
            # For main branch
            type=ref,event=branch,suffix=-{{sha}}
            type=raw,value=main,enable={{is_default_branch}}
            
            # For tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            
            # For PRs
            type=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.action.outputs.path }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run security scan
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/alert-reactions-${{ steps.action.outputs.name }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  test-actions:
    needs: detect-changes
    if: needs.detect-changes.outputs.actions_json != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        action: ${{ fromJson(needs.detect-changes.outputs.actions_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract action name
        id: action
        run: |
          ACTION_NAME=$(basename "${{ matrix.action }}")
          echo "name=$ACTION_NAME" >> $GITHUB_OUTPUT
          echo "path=${{ matrix.action }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.action.outputs.path }}
          load: true
          tags: test-${{ steps.action.outputs.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run action tests
        run: |
          echo "Running tests for action: ${{ steps.action.outputs.name }}"
          
          # Check if test.sh exists
          if [ -f "${{ steps.action.outputs.path }}/test.sh" ]; then
            echo "Found test.sh, running action-specific tests..."
            cd "${{ steps.action.outputs.path }}"
            chmod +x test.sh
            
            # Run the test script with the built image name as parameter
            ./test.sh "test-${{ steps.action.outputs.name }}:latest"
          else
            echo "No test.sh found, running basic smoke test..."
            # Basic smoke test - ensure container starts and exits successfully
            docker run --rm \
              -e WEBHOOK_URL="https://httpbin.org/post" \
              -e ALERT_JSON='{"status":"firing","labels":{"alertname":"TestAlert","severity":"warning"},"annotations":{"summary":"Test alert"}}' \
              test-${{ steps.action.outputs.name }}:latest || echo "Action test completed"
          fi
